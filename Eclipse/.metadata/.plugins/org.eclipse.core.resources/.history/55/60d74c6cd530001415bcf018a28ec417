#include "BinaryHeap.h"
#include "graph.h"
#include <stack>

void InintTable(Index start, Graph *g, TableInstance t)
{
	for(UInt32 i =0; i <= g->Size; i++)
	{
		t[i].Known = false;
		t[i].Distance = Infinity;
		t[i].Parent = NotAVertex;
	}
	t[start].Dist = 0;
}

void PrintPath(Index destNode, Table t)
{
	stack<Index> pathStack;
	TableEntry *tableEntry = &t[destNode];

	while(tableEntry->Parent != NotAVertex)
	{
		pathStack.push(tableEntry->Parent);
		tableEntry = &t[tableEntry->Parent];
	}
}

void InitializeVertextQueue(PriorityQueue priorityQueue, Table t)
{
	for(UInt32 i = 0; i < VertexNumber; i++)
	{
		Insert(priorityQueue)
	}
}
void Dijkstra(Table t, Graph *g)
{
	Index v, w;

	PriorityQueue priorityQueue = Initialize(g->Size);
	priorityQueue->Elements = new ElementType[g->Size];

	for(;;)
	{
	}
}
